name: C++ CI

on:
  push:
    branches:
      - ak5k-patch-1
    # tags:
    #   - '*'
env:
  APPVEYOR: true
  APPVEYOR_BUILD_NUMBER: ${{ github.run_number }}
  APPVEYOR_REPO_COMMIT: ${{ github.sha }}
  VS_PATH: "%ProgramFiles%\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            arch: x64_64
          - os: ubuntu-latest
            arch: aarch64
          - os: windows-latest
            arch: x64
            build_type: RelWithDebInfo
          - os: windows-latest
            arch: x86
          - os: macos-latest
            arch: arm64;x86_64

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some setup steps may vary depending on the operating system
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install ninja
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          :
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          :
        fi

    - name: Windows build
      if: runner.os == 'Windows'
      working-directory: ${{ github.workspace }}
      shell: cmd
      run: |
        if "${{matrix.arch}}" == "x64" call "%VS_PATH%\vcvars64.bat"
        if "${{matrix.arch}}" == "x86" call "%VS_PATH%\vcvars32.bat"
        cmake -B ${{ github.workspace }} ^
          -G "Ninja" ^
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ^
          -S ${{ github.workspace }}" 
        cmake --build ${{ github.workspace }} --config ${{ matrix.build_type }}


    - name: Unix-like build
      # Note the current configuration is for a basic C++ project. You'll need to update this for your specific needs.
      if: runner.os != 'Windows'
      run: |
        cmake -B ${{ github.workspace }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }} \
          -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}"
        cmake --build ${{ github.workspace }} --config ${{ matrix.build_type }}

    - name: CTest
      working-directory: ${{ github.workspace }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: CPack
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" && 
              "${{ matrix.arch }}" == "x64" ]]; then
          cpack
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          sudo cpack
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: |
          ./reaper_*.dll
          ./reaper_*.pdb
          ./reaper_*.dylib
          ./reaper_*.so
          ./*.exe
          ./*.pkg

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: my-artifact
        path: ./artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: true
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in ./artifacts/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}=$(basename $file)"
          fi
        done