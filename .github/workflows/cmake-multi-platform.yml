name: C++ CI

on:
  push:
    branches:
      - ak5k-patch-1
    # tags:
    #   - '*'
env:
  APPVEYOR: true
  APPVEYOR_BUILD_NUMBER: ${{ github.run_number }}
  APPVEYOR_REPO_COMMIT: ${{ github.sha }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # cpp_compiler: [g++, clang++]
        # c_compiler: [gcc, clang]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some setup steps may vary depending on the operating system
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y cmake
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install cmake
        fi

    - name: Configure CMake
      # Note the current configuration is for a basic C++ project. You'll need to update this for your specific needs.
      run: cmake -B ${{ github.workspace }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{ github.workspace }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}
      # Execute tests defined by the CMake configuration
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: |
          ./reaper_*.dll
          ./reaper_*.exe
          ./reaper_*.pkg
          ./reaper_*.dylib
          ./reaper_*.so

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: artifacts
              
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./artifacts/*
          asset_name: artifact
          asset_content_type: application/octet-stream